{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FeatureFlagEvaluator Contract",
  "description": "Contract for Feature Flag evaluation system",
  "version": "1.0.0",
  "service": {
    "name": "FeatureFlagEvaluator",
    "namespace": "MTM_Template_Application.Services.Configuration",
    "singleton": true
  },
  "methods": {
    "RegisterFlag": {
      "description": "Register a feature flag for evaluation",
      "request": {
        "type": "object",
        "properties": {
          "flag": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string",
                "pattern": "^[A-Za-z0-9._-]+$",
                "minLength": 1,
                "maxLength": 255,
                "description": "Unique flag name",
                "examples": ["Visual.UseForItems", "OfflineModeAllowed", "Printing.Enabled"]
              },
              "IsEnabled": {
                "type": "boolean",
                "description": "Whether flag is enabled"
              },
              "Environment": {
                "type": "string",
                "enum": ["", "Development", "Staging", "Production"],
                "description": "Environment where flag applies (empty = all environments)"
              },
              "RolloutPercentage": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "description": "Percentage of users who see this feature (0-100)"
              }
            },
            "required": ["Name", "IsEnabled", "RolloutPercentage"]
          }
        },
        "required": ["flag"]
      },
      "response": {
        "type": "void",
        "description": "Synchronous registration (adds to in-memory dictionary)"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "flag is null"
        }
      ]
    },
    "IsEnabledAsync": {
      "description": "Evaluate if a feature flag is enabled for current user/environment",
      "request": {
        "type": "object",
        "properties": {
          "flagName": {
            "type": "string",
            "pattern": "^[A-Za-z0-9._-]+$",
            "description": "Feature flag name"
          },
          "userId": {
            "type": "integer",
            "description": "User ID for deterministic rollout (optional)",
            "nullable": true
          }
        },
        "required": ["flagName"]
      },
      "response": {
        "type": "boolean",
        "description": "True if feature is enabled, false otherwise"
      },
      "behavior": {
        "flagNotFound": "Returns false + logs warning",
        "environmentMismatch": "Returns false (flag restricted to different environment)",
        "rolloutPercentage": "Deterministic evaluation using hash(userId + flagName) % 100 < rolloutPercentage",
        "noUserId": "Uses random evaluation (non-deterministic) if userId not provided"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "flagName is null"
        }
      ],
      "performance": "<5ms (in-memory lookup + hash computation)"
    },
    "SetEnabledAsync": {
      "description": "Update a feature flag's enabled state at runtime",
      "request": {
        "type": "object",
        "properties": {
          "flagName": {
            "type": "string",
            "pattern": "^[A-Za-z0-9._-]+$"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": ["flagName", "enabled"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when flag is updated"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "flagName is null"
        }
      ],
      "behavior": {
        "flagNotFound": "Logs warning (does not throw exception)",
        "sideEffects": [
          "Updates flag.IsEnabled",
          "Updates flag.EvaluatedAt timestamp",
          "Logs change at Information level"
        ]
      },
      "note": "Changes only affect in-memory state; does NOT persist to database automatically"
    },
    "GetAllFlagsAsync": {
      "description": "Get all registered feature flags (for admin UI)",
      "request": {
        "type": "object",
        "properties": {}
      },
      "response": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Name": { "type": "string" },
            "IsEnabled": { "type": "boolean" },
            "Environment": { "type": "string" },
            "RolloutPercentage": { "type": "integer" },
            "EvaluatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "description": "List of all feature flags"
      },
      "errors": []
    }
  },
  "algorithmDetails": {
    "deterministicRollout": {
      "description": "Ensures same user always sees same flag state for given percentage",
      "algorithm": "hash = SHA256(userId.ToString() + flagName); result = hash[0..4] % 100 < rolloutPercentage",
      "rationale": "Non-random evaluation prevents user confusion (feature appearing/disappearing)",
      "implementation": "Use System.Security.Cryptography.SHA256 for hash computation"
    },
    "environmentDetection": {
      "precedence": [
        "1. MTM_ENVIRONMENT environment variable",
        "2. ASPNETCORE_ENVIRONMENT environment variable",
        "3. DOTNET_ENVIRONMENT environment variable",
        "4. Build configuration (DEBUG = Development, RELEASE = Production)"
      ]
    }
  },
  "coreFlagsRegistry": {
    "description": "Core feature flags defined in feature spec (FR-018)",
    "flags": [
      {
        "name": "Visual.UseForItems",
        "description": "Enable Visual ERP integration for item master data",
        "defaultEnabled": false
      },
      {
        "name": "Visual.UseForLocations",
        "description": "Enable Visual ERP integration for location data",
        "defaultEnabled": false
      },
      {
        "name": "Visual.UseForWorkCenters",
        "description": "Enable Visual ERP integration for work center data",
        "defaultEnabled": false
      },
      {
        "name": "OfflineModeAllowed",
        "description": "Allow application to run in offline mode with cached data",
        "defaultEnabled": true
      },
      {
        "name": "Printing.Enabled",
        "description": "Enable printing features (labels, reports)",
        "defaultEnabled": true
      }
    ]
  },
  "synchronizationStrategy": {
    "description": "Feature flags sync only on launcher updates (per Clarification Q10)",
    "flow": [
      "1. MTM_Application_Launcher checks server version",
      "2. If version mismatch detected, prompt user to update",
      "3. User accepts â†’ Launcher downloads new app version + flag config",
      "4. New flags take effect on next application launch",
      "5. Running applications do NOT poll for flag changes"
    ],
    "rationale": "Ties feature flags to version deployments for predictable, stable experience"
  },
  "performance": {
    "RegisterFlag": "O(1) dictionary insert",
    "IsEnabledAsync": "<5ms (hash computation + dictionary lookup)",
    "SetEnabledAsync": "O(1) dictionary update",
    "GetAllFlagsAsync": "O(n) iteration (typically <100 flags)"
  },
  "threadSafety": {
    "mechanism": "lock statement around _flags dictionary",
    "reads": "Thread-safe via lock",
    "writes": "Thread-safe via lock",
    "performance": "Minimal contention (flags rarely updated at runtime)"
  }
}
