{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SecretsService Contract",
  "description": "Contract for Secrets Service using OS-native secure storage",
  "version": "1.0.0",
  "interface": {
    "name": "ISecretsService",
    "namespace": "MTM_Template_Application.Services.Secrets"
  },
  "implementations": [
    {
      "name": "WindowsSecretsService",
      "platform": "Windows Desktop",
      "storage": "Windows DPAPI + Credential Manager"
    },
    {
      "name": "AndroidSecretsService",
      "platform": "Android",
      "storage": "Android KeyStore (hardware-backed when available)"
    }
  ],
  "methods": {
    "StoreSecretAsync": {
      "description": "Store a secret securely using OS-native encryption",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9.:_-]+$",
            "minLength": 1,
            "maxLength": 255,
            "description": "Secret identifier (e.g., Visual.Username, Visual.Password)",
            "examples": ["Visual.Username", "Visual.Password", "Database.ConnectionString"]
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "description": "Secret value to store (never logged)",
            "sensitive": true
          },
          "cancellationToken": {
            "type": "object",
            "description": "Optional cancellation token"
          }
        },
        "required": ["key", "value"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when secret is securely stored"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "key or value is null"
        },
        {
          "code": "CryptographicException",
          "condition": "OS-native storage encryption failure"
        },
        {
          "code": "UnauthorizedAccessException",
          "condition": "Insufficient permissions to access secure storage"
        },
        {
          "code": "PlatformNotSupportedException",
          "condition": "Unsupported platform (macOS, Linux, iOS)"
        }
      ],
      "security": [
        "Value encrypted using OS-native APIs before storage",
        "Hardware-backed encryption used when available",
        "Never logged or written to disk in plaintext"
      ]
    },
    "RetrieveSecretAsync": {
      "description": "Retrieve a secret from OS-native secure storage",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9.:_-]+$",
            "description": "Secret identifier"
          },
          "cancellationToken": {
            "type": "object"
          }
        },
        "required": ["key"]
      },
      "response": {
        "type": "string",
        "nullable": true,
        "description": "Secret value (decrypted), or null if not found",
        "sensitive": true
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "key is null"
        },
        {
          "code": "CryptographicException",
          "condition": "Decryption failure (corrupted storage)",
          "recovery": "Trigger CredentialDialogView for re-entry"
        },
        {
          "code": "UnauthorizedAccessException",
          "condition": "Permissions revoked",
          "recovery": "Trigger CredentialDialogView with explanation"
        },
        {
          "code": "PlatformNotSupportedException",
          "condition": "Unsupported platform"
        }
      ],
      "behavior": {
        "notFound": "Returns null (does not throw exception)",
        "corruptedStorage": "Throws CryptographicException → UI prompts for re-entry",
        "permissionDenied": "Throws UnauthorizedAccessException → UI shows explanation + prompt"
      }
    },
    "DeleteSecretAsync": {
      "description": "Delete a secret from secure storage",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9.:_-]+$"
          },
          "cancellationToken": {
            "type": "object"
          }
        },
        "required": ["key"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when secret is deleted (no-op if key doesn't exist)"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "key is null"
        },
        {
          "code": "UnauthorizedAccessException",
          "condition": "Insufficient permissions"
        }
      ]
    },
    "RotateSecretAsync": {
      "description": "Rotate a secret (store new value, delete old)",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9.:_-]+$"
          },
          "newValue": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "sensitive": true
          },
          "cancellationToken": {
            "type": "object"
          }
        },
        "required": ["key", "newValue"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when secret is rotated"
      },
      "errors": [
        {
          "code": "ArgumentNullException",
          "condition": "key or newValue is null"
        },
        {
          "code": "CryptographicException",
          "condition": "Storage encryption failure"
        }
      ],
      "atomicity": "Best-effort (stores new, then deletes old)"
    }
  },
  "platformSpecifics": {
    "Windows": {
      "api": "ProtectedData.Protect() with DataProtectionScope.CurrentUser",
      "storage": "Windows Credential Manager (via CredentialManager NuGet package)",
      "hardwareBacked": "When TPM available",
      "isolation": "Per user account"
    },
    "Android": {
      "api": "KeyStore class with AndroidKeyStore provider",
      "storage": "Android KeyStore",
      "hardwareBacked": "API 23+ (Marshmallow) when hardware available",
      "isolation": "Per application"
    }
  },
  "securityGuidelines": [
    "Never log secret values (redact in logs)",
    "Never write secrets to plaintext files",
    "Never include secrets in exception messages",
    "Use CancellationToken to support timeout scenarios",
    "Clear sensitive strings from memory after use (if possible)"
  ],
  "performance": {
    "StoreSecretAsync": "<100ms",
    "RetrieveSecretAsync": "<100ms (includes decryption)",
    "DeleteSecretAsync": "<50ms",
    "RotateSecretAsync": "<150ms (store + delete)"
  }
}
