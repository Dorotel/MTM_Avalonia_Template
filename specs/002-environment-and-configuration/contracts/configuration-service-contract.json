{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigurationService Contract",
  "description": "Contract for Configuration Service methods and data structures",
  "version": "1.0.0",
  "methods": {
    "GetValue": {
      "description": "Get a configuration value with type safety and default fallback",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9:_]+$",
            "description": "Configuration key (colon-separated hierarchy or underscore format)",
            "examples": ["API:TimeoutSeconds", "MTM_ENVIRONMENT"]
          },
          "defaultValue": {
            "description": "Default value to return if key not found (type depends on expected return)",
            "nullable": true
          }
        },
        "required": ["key"]
      },
      "response": {
        "description": "Returns value of specified type T, or defaultValue if key not found",
        "oneOf": [
          { "type": "string" },
          { "type": "integer" },
          { "type": "number" },
          { "type": "boolean" },
          { "type": "object" },
          { "type": "null" }
        ]
      },
      "errors": []
    },
    "SetValue": {
      "description": "Set a configuration value at runtime (user configuration layer)",
      "request": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[A-Za-z0-9:_]+$",
            "description": "Configuration key"
          },
          "value": {
            "description": "Value to store (serialized as appropriate for type)"
          },
          "cancellationToken": {
            "type": "object",
            "description": "Optional cancellation token"
          }
        },
        "required": ["key", "value"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when value is persisted"
      },
      "errors": [
        {
          "code": "InvalidOperationException",
          "condition": "Key is null or whitespace"
        },
        {
          "code": "DbException",
          "condition": "Database write failure"
        }
      ],
      "sideEffects": [
        "Raises OnConfigurationChanged event",
        "Persists value to UserPreferences table",
        "Updates in-memory cache"
      ]
    },
    "LoadUserPreferencesAsync": {
      "description": "Load user-specific preferences from database",
      "request": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "minimum": 1,
            "description": "User ID from Users table"
          },
          "cancellationToken": {
            "type": "object",
            "description": "Optional cancellation token"
          }
        },
        "required": ["userId"]
      },
      "response": {
        "type": "object",
        "description": "Task completes when all preferences are loaded into memory"
      },
      "errors": [
        {
          "code": "DbException",
          "condition": "Database read failure"
        },
        {
          "code": "ArgumentException",
          "condition": "userId <= 0"
        }
      ]
    },
    "GetUserFolderPathAsync": {
      "description": "Get user-specific folder path (central server path + user folder)",
      "request": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "minimum": 1
          },
          "cancellationToken": {
            "type": "object"
          }
        },
        "required": ["userId"]
      },
      "response": {
        "type": "string",
        "description": "Full path to user's folder (e.g., \\\\server\\share\\users\\user_42)",
        "pattern": "^([A-Za-z]:\\\\|\\\\\\\\|/).*$"
      },
      "errors": [
        {
          "code": "FileNotFoundException",
          "condition": "user-folders.json not found"
        },
        {
          "code": "JsonException",
          "condition": "Invalid JSON in config file"
        }
      ]
    }
  },
  "events": {
    "OnConfigurationChanged": {
      "description": "Raised when configuration value changes",
      "eventArgs": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Configuration key that changed"
          },
          "OldValue": {
            "description": "Previous value (nullable)",
            "nullable": true
          },
          "NewValue": {
            "description": "New value (nullable)",
            "nullable": true
          }
        },
        "required": ["Key"]
      }
    }
  },
  "configurationPrecedence": [
    "1. Environment Variables (highest priority)",
    "2. User Configuration (runtime-set, persisted to database)",
    "3. Application Defaults (hard-coded fallback)"
  ],
  "keyFormats": {
    "environmentVariables": {
      "pattern": "^[A-Z0-9_]+$",
      "examples": ["MTM_ENVIRONMENT", "MTM_API_TIMEOUT", "ASPNETCORE_ENVIRONMENT"]
    },
    "configurationKeys": {
      "pattern": "^[A-Za-z0-9:]+$",
      "examples": ["API:BaseUrl", "Visual:Username", "Display:Theme"]
    }
  },
  "performance": {
    "GetValue": "<10ms (in-memory cache)",
    "SetValue": "<100ms (async database write)",
    "LoadUserPreferencesAsync": "<200ms (bulk database read)"
  }
}
